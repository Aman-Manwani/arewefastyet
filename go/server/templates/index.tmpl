<!--
Copyright 2021 The Vitess Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
-->
<!DOCTYPE html>
<html lang="en">

{{template "headHTML" .}}

<body>
  <!-- Loader for home page only -->
    <!-- Navigation -->
    {{ template "navigation" "/" }}

  <section class="py-5" style="padding-top: 10px !important;">
    <div class="container">
      <h1>Are We Fast Yet</h1>
      <p class="lead"></p>
      <p>Nightly benchmark project for <a href="https://vitess.io">Vitess</a>.</p>
    </div>
  </section>


    <!--------------------------------------------------------------------------- OLTP ---------------------------------------------------------------------------------------------->

  <section class="py-5" style="padding-top: 10px !important;">
      <div class="container">
        <h2>SYSBENCH OLTP BENCHMARK</h2>
        <p class="lead"></p>
        <p>The Sysbench OLTP application benchmark runs on top of a MySQL database running the InnoDB storage engine.
          The
          job of the storage engine is to manage the interface from the on-disk
          database to the applications reading and writing data to and from the storage engine. The storage engine in
          turn
          manages IO threads and logs, and it keeps an in-memory cache to minimize
          disk access.</p>
        <p>Sysbench is a system performance benchmark that includes an OnLine Transaction Processing (OLTP) test
          profile.
          The OLTP test is not an approximation of an OLTP test, but is rather a
          true database-backed benchmark that conducts transactional queries to an instance of MySQL in a CentOS
          environment.</p>
      </div>
    </section>

    <!--------------------------------------------------------------------------- OLTP TPS ---------------------------------------------------------------------------------------------->

    <section class="py-5">
      <div class="container">
        <h3>TPS (Transactions per second) - OLTP</h3>
        <p class="lead"></p>
        <p></p>
      </div>
    </section>
    <!-- Header - set the background image for the header in the line below -->
    <header class="py-5 bg-image-full" style="">
      {{ if not .data_oltp }}
      <p class="text-center font-italic">The graph could not be rendered.</p>
      {{ else }}
      <div class="container-xl">
        <canvas id="tps" height="100"></canvas>
      </div>
      {{ end }}
    </header>

    <!------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------->
    <!--------------------------------------------------------------------------- OLTP QPS ------------------------------------------------------------------------------------------------>

    <!-- Content section -->
    <section class="py-5">
      <div class="container">
        <h3>QPS (Queries per second) - OLTP</h3>
        <p class="lead"></p>
        <p></p>
      </div>
    </section>

    <header class="py-5 bg-image-full" style="">
      {{ if not .data_oltp }}
      <p class="text-center font-italic">The graph could not be rendered.</p>
      {{ else }}
      <div class="container-xl">
        <canvas id="qps" height="100"></canvas>
      </div>
      {{ end }}
    </header>

    <!------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------->
    <!----------------------------------------------------------------------- OLTP LATENCY ------------------------------------------------------------------------------------------------>

    <!-- Content section -->
    <section class="py-5">
      <div class="container">
        <h3>Latency (Milliseconds) - OLTP</h3>
        <p class="lead"></p>
        <p></p>
      </div>
    </section>

    <header class="py-5 bg-image-full" style="">
      {{ if not .data_oltp }}
      <p class="text-center font-italic">The graph could not be rendered.</p>
      {{ else }}
      <div class="container-xl">
        <canvas id="latency" height="100"></canvas>
      </div>
      {{ end }}
    </header>

    <!------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------->
    <!------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------->
    <!------------------------------------------------------------------------------- TPCC ------------------------------------------------------------------------------------------------>

    <section class="py-5">
      <div class="container">
        <h2>TPC-C BENCHMARK</h2>
        <p class="lead"></p>
        <p>"Despite being 25 years old, the TPC-C benchmark can still provide an interesting intensive workload for a
          database in my opinion. It runs multi-statement transactions
          and is write-heavy. We also decided to use Sysbench 1.0, which allows much more flexible LUA scripting that
          allows us to implement TPCC-like workload."</p>
        <p><a href="https://www.percona.com/blog/2018/03/05/tpcc-like-workload-sysbench-1-0/">Percona blog</a></p>
      </div>
    </section>

    <!----------------------------------------------------------------------------- TPCC TPS ----------------------------------------------------------------------------------------------->

    <section class="py-5">
      <div class="container">
        <h3>TPS (Transactions per second) - TPCC</h3>
        <p class="lead"></p>
        <p></p>
      </div>
    </section>

    <!-- Header - set the background image for the header in the line below -->
    <header class="py-5 bg-image-full" style="">
      {{ if not .data_tpcc }}
      <p class="text-center font-italic">The graph could not be rendered.</p>
      {{ else }}
      <div class="container-xl">
        <canvas id="tps_tpcc" height="100"></canvas>
      </div>
      {{ end }}
    </header>

    <!------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------->
    <!----------------------------------------------------------------------------- TPCC QPS----------------------------------------------------------------------------------------------->

    <!-- Content section -->
    <section class="py-5">
      <div class="container">
        <h3>QPS (Queries per second)- TPCC</h3>
        <p class="lead"></p>
        <p></p>
      </div>
    </section>

    <header class="py-5 bg-image-full" style="">
      {{ if not .data_tpcc }}
      <p class="text-center font-italic">The graph could not be rendered.</p>
      {{ else }}
      <div class="container-xl">
        <canvas id="qps_tpcc" height="100"></canvas>
      </div>
      {{ end }}
    </header>

    <!------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------->
    <!----------------------------------------------------------------------------- TPCC LATENCY ------------------------------------------------------------------------------------------>

    <!-- Content section -->
    <section class="py-5">
      <div class="container">
        <h3>Latency (Milliseconds) - TPCC</h3>
        <p class="lead"></p>
        <p></p>
      </div>
    </section>

    <header class="py-5 bg-image-full" style="">
      {{ if not .data_tpcc }}
      <p class="text-center font-italic">The graph could not be rendered.</p>
      {{ else }}
      <div class="container-xl">
        <canvas id="latency_tpcc" height="100"></canvas>
      </div>
      {{ end }}
    </header>

    <!------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------->
    <!------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------->

  {{template "footerHTML" .}}

  <!-- Chart JS code -->

  <script>

    function graphTPS(id, labels, data) {
      var ctx = document.getElementById(id).getContext('2d');

      var chart = new Chart(ctx, {
        // The type of chart we want to create
        type: 'line',

        // The data for our dataset
        data: {
          labels: labels,
          datasets: [{
            label: 'TPS (Transactions per second)',
            borderColor: 'orange',
            data: data
          },
          ]
        },

        // Configuration options go here
        options: {
          responsive: true,
          scales: {
            xAxes: [{
              ticks: {
                display: false, //this will remove only the label
                padding: 4,
              },
            }],
            yAxes: [{
              ticks: {
                min: 0
              },
            }]
          }
        }
      });
    }

    function graphQPS(id, labels, total, reads, writes, others) {
      var ctx = document.getElementById(id).getContext('2d');

      var chart = new Chart(ctx, {
        // The type of chart we want to create
        type: 'line',

        // The data for our dataset
        data: {
          labels: labels,
          datasets: [{
            label: 'total',
            borderColor: 'red',
            data: total
          },
            {
              label: 'reads',
              borderColor: 'blue',
              data: reads
            },
            {
              label: 'writes',
              borderColor: 'green',
              data: writes
            },
            {
              label: 'others',
              borderColor: 'purple',
              data: others
            }
          ]
        },

        // Configuration options go here
        options: {
          responsive: true,
          scales: {
            xAxes: [{
              ticks: {
                display: false, //this will remove only the label
                padding: 4,
              },
            }],
            yAxes: [{
              ticks: {
                min: 0
              },
            }]
          }
        }
      });
    }

    function graphLatency(id, labels, latency) {
      var ctx = document.getElementById(id).getContext('2d');

      var chart = new Chart(ctx, {
        // The type of chart we want to create
        type: 'line',

        // The data for our dataset
        data: {
          labels: labels,
          datasets: [{
            label: 'latency',
            borderColor: 'black',
            data: latency
          },
          ]
        },

        // Configuration options go here
        options: {
          responsive: true,
          scales: {
            xAxes: [{
              ticks: {
                display: false, //this will remove only the label
                padding: 4,
              },
            }],
            yAxes: [{
              ticks: {
                min: 0
              },
            }]
          }
        }
      });
    }

    function plotOLTP(data) {
      graph_oltp = data
      label_oltp = []
      data_tps = []
      latency = []
      total = []
      reads = []
      writes = []
      others = []

      for (var i = 0; i < graph_oltp.length; i++) {
        data_tps.push(graph_oltp[i].Result.tps);
        latency.push(graph_oltp[i].Result.latency);
        total.push(graph_oltp[i].Result.qps.total)
        reads.push(graph_oltp[i].Result.qps.reads)
        writes.push(graph_oltp[i].Result.qps.writes)
        others.push(graph_oltp[i].Result.qps.others)

        label_oltp.push(graph_oltp[i].GitRef + " | " + graph_oltp[i].CreatedAt);
      }
      graphTPS("tps", label_oltp, data_tps);
      graphQPS("qps", label_oltp, total, reads, writes, others);
      graphLatency("latency", label_oltp, latency);
    }

    function plotTPCC(data) {
      graph_tpcc = data
      label_tpcc = []
      data_tps = []
      latency = []
      total = []
      reads = []
      writes = []
      others = []

      console.log(graph_tpcc[0])
      for (var i = 0; i < graph_tpcc.length; i++) {
        data_tps.push(graph_tpcc[i].Result.tps);
        latency.push(graph_tpcc[i].Result.latency);
        total.push(graph_tpcc[i].Result.qps.total)
        reads.push(graph_tpcc[i].Result.qps.reads)
        writes.push(graph_tpcc[i].Result.qps.writes)
        others.push(graph_tpcc[i].Result.qps.others)

        label_tpcc.push(graph_tpcc[i].GitRef + " | " + graph_tpcc[i].CreatedAt);
      }

      graphTPS("tps_tpcc", label_tpcc, data_tps);
      graphQPS("qps_tpcc", label_tpcc, total, reads, writes, others);
      graphLatency("latency_tpcc", label_tpcc, latency);
    }

    {{ if .data_oltp }}
      plotOLTP({{ .data_oltp }})
    {{ end }}

    {{ if .data_tpcc}}
      plotTPCC({{ .data_tpcc }})
    {{ end }}
  </script>

</body>

</html>
